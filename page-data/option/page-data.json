{"componentChunkName":"component---src-components-blog-post-tsx","path":"/option","webpackCompilationHash":"13a76a1c312793f7d1cf","result":{"data":{"markdownRemark":{"html":"<p>Of all the <code class=\"language-text\">fp-ts</code> modules we use in our code, <code class=\"language-text\">Option</code> seems to be the most prevalent, and for that reason alone it would be worthwhile to get familiar with. I think it’s also a good place to start within the <code class=\"language-text\">fp-ts</code> eco-system because it’s relatively simple and some of the concepts learned herein are widely applicable.</p>\n<hr>\n<h2>Computations that might fail</h2>\n<p>In JavaScript (and TypeScript) we often have to deal with values that might be <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>, and a common pattern for dealing with such values is to use a null check with conditional branching. Here’s a contrived example.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUserName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">users<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> matchedUser <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> matchedUser <span class=\"token operator\">&amp;&amp;</span> matchedUser<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we’re looking for a user, and then either returning the name of that user if they exist, or (implicitly) returning <code class=\"language-text\">undefined</code> if the lookup fails.\nThis “passes the buck” to the consumer of this function; they will also have to check that the name is not null before continuing.\nWhile TypeScript usually helps to ensure we check for nullable values as needed, it’s possible for these values to slip all the way through to the UI or some other place we didn’t want them.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Greeting</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// This type checks, but might render `Hello  !`</span></code></pre></div>\n<p>Instead of implicitly passing around null-ish values, a saner approach might be to explicitly encode the possibility of failure (or the possibility of a missing value) in the type of thing we’re dealing with.\n<code class=\"language-text\">Option</code> in <code class=\"language-text\">fp-ts</code> allows us to do just that.\n<code class=\"language-text\">Option</code> is a type <em>constructor</em> (like an <code class=\"language-text\">Array</code> or a <code class=\"language-text\">Set</code>) that takes another type as its “contents”.\nIndeed, one way to think of <code class=\"language-text\">Option</code> is as an array that is either empty or contains a single value.\nThe single value case looks like <code class=\"language-text\">some(x)</code> and the empty case is called <code class=\"language-text\">none</code>.</p>\n<p>With that in mind we can implement our own primitive version:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> none<span class=\"token punctuation\">:</span> Option<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> some <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span></code></pre></div>\n<p>We could also define a utility function for converting <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code> values to our option type</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> fromNullable <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  x <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> none <span class=\"token punctuation\">:</span> <span class=\"token function\">some</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we can refactor our <code class=\"language-text\">getUserName</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> getUserName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Option<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> matchedUserOpt <span class=\"token operator\">=</span> <span class=\"token function\">fromNullable</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> matchedUserOpt<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that the return type went from <code class=\"language-text\">string | undefined</code> to <code class=\"language-text\">Option&lt;string&gt;</code>, so any one using this function downstream has to reckon with that and explicitly handle the fact that the value might be missing.\n(We’ll talk about common patterns for extracting the value “out of” an <code class=\"language-text\">Option</code> below).\nThe <code class=\"language-text\">map</code> here is nothing magic—it’s just <code class=\"language-text\">Array.prototype.map</code>, which returns an empty array when called on an empty array, or transforms the inner values of an array when there are any.\nIt’s no accident that this is exactly how <code class=\"language-text\">map</code> works for <code class=\"language-text\">Option</code> as well; it safely ignores the <code class=\"language-text\">none</code> case and only applies the passed in function to the <code class=\"language-text\">some</code> case.</p>\n<h2>Chaining options</h2>\n<p>Suppose we add a nullable <code class=\"language-text\">address</code> field to our <code class=\"language-text\">User</code> type.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"gatsby-highlight-code-line\">  address<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>And we want to write <code class=\"language-text\">getUserAddress</code>. Here’s a first pass</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUserAddress</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">users<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> matchedUser <span class=\"token operator\">=</span> <span class=\"token function\">fromNullable</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> matchedUser<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This might look like what we want, but if we inspect the return type we are actually returning <code class=\"language-text\">Option&lt;string | undefined&gt;</code>.\nThis is kind of a bummer and really undermines our whole endeavor of making the possibility of failure explicit.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> users<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">:</span> <span class=\"token string\">\"21 Pine St.\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Carol\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">getUserAddress</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//-> some(undefined)</span>\n<span class=\"token function\">getUserAddress</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//-> some(\"21 Pine St.\")</span></code></pre></div>\n<p>Let’s first try to use <code class=\"language-text\">fromNullable</code> again to change that <code class=\"language-text\">string | undefined</code> to an <code class=\"language-text\">Option&lt;string&gt;</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUserAddress</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">users<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> matchedUser <span class=\"token operator\">=</span> <span class=\"token function\">fromNullable</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> matchedUser<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token function\">fromNullable</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>OK, but now we’re returning a nested <code class=\"language-text\">Option&lt;Option&lt;string&gt;&gt;</code> when really we only care about the cases where either that address exists or it doesn’t.\nSo it seems like what we really want is just an <code class=\"language-text\">Option&lt;string&gt;</code>.\nIs there any way of collapsing those nested <code class=\"language-text\">Option</code>s down to one layer?</p>\n<p>If we step back for a moment and remember that our <code class=\"language-text\">Option</code> is just an alias for <code class=\"language-text\">Array</code>, we realize we do indeed have built-in methods for collapsing that structure: there’s <code class=\"language-text\">Array#flatten</code> and <code class=\"language-text\">Array#flatMap</code>.\nSince we’re already mapping we can make use of the latter, which in the <code class=\"language-text\">Option</code> module is called <code class=\"language-text\">chain</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>chain <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>flatMap\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUserAddress</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">users<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> matchedUser <span class=\"token operator\">=</span> <span class=\"token function\">fromNullable</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> matchedUser<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token function\">fromNullable</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getUserAddress</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//-> none</span>\n<span class=\"token function\">getUserAddress</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//-> some(\"21 Pine St.\")</span></code></pre></div>\n<p>Yay!\nNow we’ve reduced our return type to a single layered <code class=\"language-text\">Option&lt;string&gt;</code>.\nHowever, extending the built-in prototypes is usually a bad idea, so from here on we’ll just use <code class=\"language-text\">Option</code> class that <code class=\"language-text\">fp-ts</code> provides instead of our own version.</p>\n<h2>Getting the value “out of” the option</h2>\n<p><code class=\"language-text\">@TODO</code>: Talk about (implement?) <code class=\"language-text\">getOrElse</code> / <code class=\"language-text\">fold</code>ing</p>","frontmatter":{"date":"October 26, 2019","path":"/option","title":"Option"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}